0. (a) Facebook	
   undirected, sparse, cyclic

   (b) Twitter
   directed, sparse, cyclic

   (c) a family
   undirected, dense, cyclic

   (d) V=airports, E=direct_flights
   undirected, sparse, cyclic
   (assuming if there is a direct flight from A to B,
    there must also be a direct flight from B to A)

   (e) a mesh
   undirected, sparse, cyclic

   ---+---+---+--
      |   |   | 
   ---+---+---+--

   (f) V=courses, E=prerequisites
   directed, sparse, acyclic

   (g) a tree
   undirected, sparse, acyclic
   
   (h) V=linux_software_packages, E=dependencies
   directed, sparse, acyclic

   (i) DP subproblems for 0-1 knapsack
   directed, sparse, acyclic

   Can you name a very big dense graph?
   No. Naturally occuring big graphs are fundamentally sparse.

1. time: O(V+E)
   different implementation styles:
   (a) bottom-up (BFS), using stack (pop() and append())
   (b) bottom-up (BFS), using queue (maintain a pointer pointing to the start of the queue,
       	 everything before that position has been popped -- this is the one in viterbi.py)
   (c) recursive top down (DFS), see textbooks (or Thursday's lecture).

   we provided (a) and (b) in topol.py, and will do (c) as an in-class demo on Thursday.

   questions: 
   (b-c): the top-down implementations for DP problems basically use a topological order found by 
    	  top-down topological sort. See Thursday's class.
	  
2. time: O(V+E)
   note that we added a dummy sink so that the best path always ends there,
   it makes the code shorter, but you can also just start backtracing from the v that has max best[v].
